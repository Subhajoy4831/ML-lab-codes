# -*- coding: utf-8 -*-
"""diabetes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Jdvuikr9yxOaGSMc9oiXuIZQWa0ogb2T
"""

#Diabetes Dataset
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn import tree
from sklearn.tree import plot_tree
import sklearn.datasets
from sklearn.tree import DecisionTreeClassifier, export_text, export_graphviz
import pydotplus
from IPython.display import Image
import graphviz

!gdown 1yNrcb1SRF_KSMxEhkZTEGGbMsDyAGI4h

df = pd.read_csv('diabetes.csv')
df["Outcome"] = df["Outcome"].apply(str)

X = df.drop("Outcome",axis=1)
Y = df["Outcome"]

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.26)

#Decision Tree Classifier

from sklearn.tree import DecisionTreeClassifier
classifier = DecisionTreeClassifier(criterion='gini')
classifier.fit(X_train,Y_train)
y_pred  = classifier.predict(X_test)

from sklearn.metrics import classification_report, confusion_matrix
print("Confusion Matrix:")
print(confusion_matrix(Y_test,y_pred))
print("------------------")
print("-------------------")
print('Classification Report:')
print(classification_report(Y_test,y_pred))

dot_data = export_graphviz(classifier, out_file=None, feature_names=X.columns, class_names=Y.unique(),
                           filled=True, rounded=True, special_characters=True)
graph = pydotplus.graph_from_dot_data(dot_data)
decision_tree_image_path = "decision_tree.png"
graph.write_png(decision_tree_image_path)
Image(decision_tree_image_path)

import seaborn as sns
cm = confusion_matrix(Y_test,y_pred)
sns.heatmap(cm,annot=True,fmt="d",cmap='magma')
plt.show

categories = ['90-10', '80-20', '70-30', '60-40', '50-50']
values = [0.73, 0.59, 0.61, 0.72, 0.73]

plt.plot(categories, values)
plt.xlabel('Train-Test Division')
plt.ylabel('Accuracy')
plt.title('Comparison of Accuracy')

plt.show()

#MultinomialNB

from sklearn.naive_bayes import MultinomialNB
classifier = MultinomialNB(alpha=1,fit_prior=True,class_prior=None).fit(X_train,Y_train)
classifier.fit(X_train,Y_train)
y_pred  = classifier.predict(X_test)

from sklearn.metrics import classification_report, confusion_matrix
print("Confusion Matrix:")
print(confusion_matrix(Y_test,y_pred))
print("------------------")
print("-------------------")
print('Classification Report:')
print(classification_report(Y_test,y_pred))

import seaborn as sns
cm = confusion_matrix(Y_test,y_pred)
sns.heatmap(cm,annot=True,fmt="d",cmap='magma')
plt.show

categories = ['90-10', '80-20', '70-30', '60-40', '50-50']
values = [0.64, 0.68, 0.61, 0.66, 0.64]

plt.plot(categories, values)
plt.xlabel('Train-Test Division')
plt.ylabel('Accuracy')
plt.title('Comparison of Accuracy')

plt.show()

#GaussianNB

from sklearn.naive_bayes import GaussianNB
classifier = GaussianNB(priors=None,var_smoothing=1e-05).fit(X_train,Y_train)
classifier.fit(X_train,Y_train)
y_pred  = classifier.predict(X_test)

from sklearn.metrics import classification_report, confusion_matrix
print("Confusion Matrix:")
print(confusion_matrix(Y_test,y_pred))
print("------------------")
print("-------------------")
print('Classification Report:')
print(classification_report(Y_test,y_pred))

import seaborn as sns

cm = confusion_matrix(Y_test,y_pred)

sns.heatmap(cm,annot=True,fmt="d",cmap='magma')

plt.show

categories = ['90-10', '80-20', '70-30', '60-40', '50-50']

values = [0.78, 0.73, 0.76, 0.77, 0.77]

plt.plot(categories, values)

plt.xlabel('Train-Test Division')

plt.ylabel('Accuracy')

plt.title('Comparison of Accuracy')

plt.show()

#BernoulliNB

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.40)

from sklearn.naive_bayes import BernoulliNB
classifier = BernoulliNB(alpha=1.0,binarize=4.5,fit_prior=True,class_prior=None).fit(X_train,Y_train)
classifier.fit(X_train,Y_train)
y_pred  = classifier.predict(X_test)

from sklearn.metrics import classification_report, confusion_matrix
print("Confusion Matrix:")
print(confusion_matrix(Y_test,y_pred))
print("------------------")
print("-------------------")
print('Classification Report:')
print(classification_report(Y_test,y_pred))

import seaborn as sns

cm = confusion_matrix(Y_test,y_pred)

sns.heatmap(cm,annot=True,fmt="d",cmap='magma')

plt.show

categories = ['90-10', '80-20', '70-30', '60-40', '50-50']

values = [0.62, 0.67, 0.65, 0.65, 0.61]

plt.plot(categories, values)

plt.xlabel('Train-Test Division')

plt.ylabel('Accuracy')

plt.title('Comparison of Accuracy')

plt.show()